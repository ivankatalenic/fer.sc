#include "rules.hh"

#include "variables.hh"
#include "function_builder.hh"

static std::vector<std::array<IntUnaryFunction const*, 7>> accel_v0() {
	return std::vector<std::array<IntUnaryFunction const*, 7>>{
		{
			Var::distance_close,
			Var::ignore,
			Var::distance_close,
			Var::ignore,
			FunctionBuilder::combineZadehOr(
				Var::speed_big,
				Var::speed_medium
			),
			Var::ignore,
			Var::accel_ns
		},
		{
			Var::ignore,
			Var::distance_close,
			Var::ignore,
			Var::distance_close,
			FunctionBuilder::combineZadehOr(
				Var::speed_big,
				Var::speed_medium
			),
			Var::ignore,
			Var::accel_ns
		},
		{
			Var::distance_close,
			Var::ignore,
			Var::distance_medium,
			Var::ignore,
			FunctionBuilder::combineZadehOr(
				Var::speed_big,
				Var::speed_medium
			),
			Var::ignore,
			Var::accel_nb
		},
		{
			Var::ignore,
			Var::distance_close,
			Var::ignore,
			Var::distance_medium,
			FunctionBuilder::combineZadehOr(
				Var::speed_big,
				Var::speed_medium
			),
			Var::ignore,
			Var::accel_nb
		},
		{
			Var::distance_medium,
			Var::ignore,
			Var::distance_close,
			Var::ignore,
			FunctionBuilder::combineZadehOr(
				Var::speed_big,
				Var::speed_medium
			),
			Var::ignore,
			Var::accel_nb
		},
		{
			Var::ignore,
			Var::distance_medium,
			Var::ignore,
			Var::distance_close,
			FunctionBuilder::combineZadehOr(
				Var::speed_big,
				Var::speed_medium
			),
			Var::ignore,
			Var::accel_nb
		},
		{
			Var::distance_far,
			Var::ignore,
			Var::distance_far,
			Var::ignore,
			Var::ignore,
			Var::ignore,
			Var::accel_pb
		},
		{
			Var::ignore,
			Var::distance_far,
			Var::ignore,
			Var::distance_far,
			Var::ignore,
			Var::ignore,
			Var::accel_pb
		},
		{
			Var::ignore,
			Var::ignore,
			Var::ignore,
			Var::ignore,
			Var::speed_small,
			Var::direction_right,
			Var::accel_ps
		},
	};
}

static std::vector<std::array<IntUnaryFunction const*, 7>> accel_v1() {
	return std::vector<std::array<IntUnaryFunction const*, 7>>{
		{
			Var::ignore,
			Var::ignore,
			Var::ignore,
			Var::ignore,
			Var::speed_small,
			Var::direction_right,
			Var::accel_ps
		},
		{
			Var::ignore,
			Var::ignore,
			Var::ignore,
			Var::ignore,
			Var::speed_small,
			Var::ignore,
			Var::accel_ps
		},
		{
			Var::ignore,
			Var::ignore,
			Var::ignore,
			Var::ignore,
			Var::speed_big,
			Var::ignore,
			Var::accel_ns
		}
	};
}

std::vector<std::array<IntUnaryFunction const*, 7>> Rules::get_for_accel() {
	return accel_v1();
}

static std::vector<std::array<IntUnaryFunction const*, 7>> omega_v0() {
	return std::vector<std::array<IntUnaryFunction const*, 7>>{
		{
			Var::distance_close,
			Var::ignore,
			FunctionBuilder::combineZadehOr(
				Var::distance_close,
				Var::distance_medium
			),
			Var::ignore,
			Var::ignore,
			Var::ignore,
			Var::omega_nb
		},
		{
			Var::ignore,
			Var::distance_close,
			Var::ignore,
			FunctionBuilder::combineZadehOr(
				Var::distance_close,
				Var::distance_medium
			),
			Var::ignore,
			Var::ignore,
			Var::omega_pb
		},
		{
			Var::distance_medium,
			Var::ignore,
			Var::distance_close,
			Var::ignore,
			FunctionBuilder::combineZadehOr(
				Var::speed_big,
				Var::speed_medium
			),
			Var::ignore,
			Var::omega_nb
		},
		{
			Var::ignore,
			Var::distance_medium,
			Var::ignore,
			Var::distance_close,
			FunctionBuilder::combineZadehOr(
				Var::speed_big,
				Var::speed_medium
			),
			Var::ignore,
			Var::omega_pb
		},
		{
			Var::distance_far,
			Var::ignore,
			Var::distance_far,
			Var::ignore,
			FunctionBuilder::combineZadehOr(
				Var::speed_small,
				Var::speed_medium
			),
			Var::ignore,
			Var::omega_zo
		},
		{
			Var::ignore,
			Var::distance_far,
			Var::ignore,
			Var::distance_far,
			FunctionBuilder::combineZadehOr(
				Var::speed_small,
				Var::speed_medium
			),
			Var::ignore,
			Var::omega_zo
		},
		{
			Var::distance_far,
			Var::distance_close,
			Var::ignore,
			Var::ignore,
			Var::ignore,
			Var::direction_wrong,
			Var::omega_pb
		},
		{
			Var::distance_close,
			Var::distance_far,
			Var::ignore,
			Var::ignore,
			Var::ignore,
			Var::direction_wrong,
			Var::omega_nb
		}
	};
}

static std::vector<std::array<IntUnaryFunction const*, 7>> omega_v1() {
	return std::vector<std::array<IntUnaryFunction const*, 7>>{
		{
			Var::distance_close,
			Var::ignore,
			FunctionBuilder::combineZadehOr(
				Var::distance_close,
				Var::distance_medium
			),
			Var::ignore,
			Var::ignore,
			Var::ignore,
			Var::omega_ns
		},
		{
			Var::ignore,
			Var::distance_close,
			Var::ignore,
			FunctionBuilder::combineZadehOr(
				Var::distance_close,
				Var::distance_medium
			),
			Var::ignore,
			Var::ignore,
			Var::omega_ps
		},
		{
			Var::distance_medium,
			Var::ignore,
			Var::distance_close,
			Var::ignore,
			Var::ignore,
			Var::ignore,
			Var::omega_nb
		},
		{
			Var::ignore,
			Var::distance_medium,
			Var::ignore,
			Var::distance_close,
			Var::ignore,
			Var::ignore,
			Var::omega_pb
		},
		{
			Var::distance_far,
			Var::ignore,
			Var::distance_far,
			Var::ignore,
			Var::ignore,
			Var::ignore,
			Var::omega_zo
		},
		{
			Var::ignore,
			Var::distance_far,
			Var::ignore,
			Var::distance_far,
			Var::ignore,
			Var::ignore,
			Var::omega_zo
		},
		{
			Var::distance_far,
			Var::distance_close,
			Var::ignore,
			Var::ignore,
			Var::ignore,
			Var::direction_wrong,
			Var::omega_pb
		},
		{
			Var::distance_close,
			Var::distance_far,
			Var::ignore,
			Var::ignore,
			Var::ignore,
			Var::direction_wrong,
			Var::omega_nb
		}
	};
}

static std::vector<std::array<IntUnaryFunction const*, 7>> omega_v2() {
	return std::vector<std::array<IntUnaryFunction const*, 7>>{
		{
			FunctionBuilder::combineZadehOr(
				Var::distance_close,
				Var::distance_medium
			),
			Var::ignore,
			Var::distance_close,
			Var::ignore,
			Var::ignore,
			Var::ignore,
			Var::omega_nb
		},
		{
			Var::ignore,
			FunctionBuilder::combineZadehOr(
				Var::distance_close,
				Var::distance_medium
			),
			Var::ignore,
			Var::distance_close,
			Var::ignore,
			Var::ignore,
			Var::omega_pb
		},
		{
			FunctionBuilder::combineZadehOr(
				Var::distance_far,
				Var::distance_medium
			),
			Var::ignore,
			Var::distance_medium,
			Var::ignore,
			Var::ignore,
			Var::ignore,
			Var::omega_ns
		},
		{
			Var::ignore,
			FunctionBuilder::combineZadehOr(
				Var::distance_far,
				Var::distance_medium
			),
			Var::ignore,
			Var::distance_medium,
			Var::ignore,
			Var::ignore,
			Var::omega_ps
		},
		{
			Var::distance_far,
			Var::ignore,
			Var::distance_far,
			Var::ignore,
			Var::ignore,
			Var::ignore,
			Var::omega_zo
		},
		{
			Var::ignore,
			Var::distance_far,
			Var::ignore,
			Var::distance_far,
			Var::ignore,
			Var::ignore,
			Var::omega_zo
		},
		{
			Var::distance_far,
			Var::distance_close,
			Var::ignore,
			Var::ignore,
			Var::ignore,
			Var::direction_wrong,
			Var::omega_pb
		},
		{
			Var::distance_close,
			Var::distance_far,
			Var::ignore,
			Var::ignore,
			Var::ignore,
			Var::direction_wrong,
			Var::omega_nb
		}
	};
}

static std::vector<std::array<IntUnaryFunction const*, 7>> omega_v3() {
	return std::vector<std::array<IntUnaryFunction const*, 7>>{
		{
			FunctionBuilder::combineZadehOr(
				Var::distance_close,
				Var::distance_medium
			),
			Var::ignore,
			Var::distance_close,
			Var::ignore,
			Var::ignore,
			Var::ignore,
			Var::omega_nb
		},
		{
			Var::ignore,
			FunctionBuilder::combineZadehOr(
				Var::distance_close,
				Var::distance_medium
			),
			Var::ignore,
			Var::distance_close,
			Var::ignore,
			Var::ignore,
			Var::omega_pb
		},
		{
			FunctionBuilder::combineZadehOr(
				Var::distance_far,
				Var::distance_medium
			),
			Var::ignore,
			Var::distance_medium,
			Var::ignore,
			Var::ignore,
			Var::ignore,
			Var::omega_ns
		},
		{
			Var::ignore,
			FunctionBuilder::combineZadehOr(
				Var::distance_far,
				Var::distance_medium
			),
			Var::ignore,
			Var::distance_medium,
			Var::ignore,
			Var::ignore,
			Var::omega_ps
		},
		{
			Var::distance_close,
			Var::ignore,
			Var::ignore,
			Var::ignore,
			Var::ignore,
			Var::ignore,
			Var::omega_nb
		},
		{
			Var::ignore,
			Var::distance_close,
			Var::ignore,
			Var::ignore,
			Var::ignore,
			Var::ignore,
			Var::omega_pb
		},
		{
			Var::distance_far,
			Var::ignore,
			Var::distance_far,
			Var::ignore,
			Var::ignore,
			Var::ignore,
			Var::omega_zo
		},
		{
			Var::ignore,
			Var::distance_far,
			Var::ignore,
			Var::distance_far,
			Var::ignore,
			Var::ignore,
			Var::omega_zo
		},
		{
			Var::distance_far,
			Var::distance_close,
			Var::ignore,
			Var::ignore,
			Var::ignore,
			Var::direction_wrong,
			Var::omega_pb
		},
		{
			Var::distance_close,
			Var::distance_far,
			Var::ignore,
			Var::ignore,
			Var::ignore,
			Var::direction_wrong,
			Var::omega_nb
		}
	};
}

static std::vector<std::array<IntUnaryFunction const*, 7>> omega_v4() {
	return std::vector<std::array<IntUnaryFunction const*, 7>>{
		{
			FunctionBuilder::combineZadehOr(
				Var::distance_close,
				Var::distance_medium
			),
			Var::ignore,
			Var::distance_close,
			Var::ignore,
			Var::ignore,
			Var::ignore,
			Var::omega_nb
		},
		{
			Var::ignore,
			FunctionBuilder::combineZadehOr(
				Var::distance_close,
				Var::distance_medium
			),
			Var::ignore,
			Var::distance_close,
			Var::ignore,
			Var::ignore,
			Var::omega_pb
		},
		{
			FunctionBuilder::combineZadehOr(
				Var::distance_far,
				Var::distance_medium
			),
			Var::ignore,
			Var::distance_medium,
			Var::ignore,
			Var::ignore,
			Var::ignore,
			Var::omega_ns
		},
		{
			Var::ignore,
			FunctionBuilder::combineZadehOr(
				Var::distance_far,
				Var::distance_medium
			),
			Var::ignore,
			Var::distance_medium,
			Var::ignore,
			Var::ignore,
			Var::omega_ps
		},
		{
			Var::distance_close,
			Var::ignore,
			Var::ignore,
			Var::ignore,
			Var::ignore,
			Var::ignore,
			Var::omega_nb
		},
		{
			Var::ignore,
			Var::distance_close,
			Var::ignore,
			Var::ignore,
			Var::ignore,
			Var::ignore,
			Var::omega_pb
		},
		{
			Var::ignore,
			Var::ignore,
			Var::distance_close,
			Var::ignore,
			Var::ignore,
			Var::ignore,
			Var::omega_nb
		},
		{
			Var::ignore,
			Var::ignore,
			Var::ignore,
			Var::distance_close,
			Var::ignore,
			Var::ignore,
			Var::omega_pb
		},
		{
			Var::distance_far,
			Var::ignore,
			Var::distance_far,
			Var::ignore,
			Var::ignore,
			Var::ignore,
			Var::omega_zo
		},
		{
			Var::ignore,
			Var::distance_far,
			Var::ignore,
			Var::distance_far,
			Var::ignore,
			Var::ignore,
			Var::omega_zo
		},
		{
			Var::distance_far,
			Var::distance_close,
			Var::ignore,
			Var::ignore,
			Var::ignore,
			Var::direction_wrong,
			Var::omega_pb
		},
		{
			Var::distance_close,
			Var::distance_far,
			Var::ignore,
			Var::ignore,
			Var::ignore,
			Var::direction_wrong,
			Var::omega_nb
		}
	};
}

std::vector<std::array<IntUnaryFunction const*, 7>> Rules::get_for_omega() {
	return omega_v4();
}
